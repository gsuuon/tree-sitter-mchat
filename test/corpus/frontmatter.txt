==============||
Handler and message
==============||

testchathandler

count to three

---||

(document
  (chat_handler)
  (message_sequence
    (user_message
      (content))))

==============||
Handler, instruction and message
==============||

testchathandler

> instruction

message

---||

(document
  (chat_handler)
  (system_instruction)
  (message_sequence
    (user_message
      (content))))

==============||
Handler, message and settings
==============||

testchathandler
---
{
  model = "gpt"
}
---
count to three

---||

(document
  (chat_handler)
  (params_block)
  (message_sequence
    (user_message
      (content))))


==============||
Handler, settings, instruction, message
==============||

testchathandler
---
{
  model = "gpt"
}
---
> You are a helpful assistant

count to three

---||

(document
  (chat_handler)
  (params_block)
  (system_instruction)
  (message_sequence
    (user_message
      (content))))

==============||
Handler, settings, instruction, turn
==============||

testchathandler
---
{
  model = "gpt"
}
---
> You are a helpful assistant

count to three

======
1, 2, 3.
======

---||

(document
  (chat_handler)
  (params_block)
  (system_instruction)
  (message_sequence
    (user_message
      (content))
    (turn_delimiter)
    (assistant_message
      (content))
    (turn_delimiter)))

==============||
Handler, settings, instruction, multiple turns
==============||

testchathandler
---
{
  model = "gpt"
}
---
> You are a helpful assistant

count to three

======
1
2
3
======

continue to five

======
4
5
======

---||

(document
  (chat_handler)
  (params_block)
  (system_instruction)
  (message_sequence
   (user_message
     (content))
   (turn_delimiter)
   (assistant_message
    (content))
   (turn_delimiter)
   (user_message
     (content))
   (turn_delimiter)
   (assistant_message
    (content))
   (turn_delimiter)))

==============||
Handler, settings, instruction, turns ending with user
==============||

testchathandler
---
{
  model = "gpt"
}
---
> You are a helpful assistant

count to three

======
1
2
3
======

continue to five

---||

(document
  (chat_handler)
  (params_block)
  (system_instruction)
  (message_sequence
   (user_message
     (content))
   (turn_delimiter)
   (assistant_message
    (content))
   (turn_delimiter)
   (user_message
     (content))))

==============||
Handler, settings, instruction, turns ending with assistant partial
==============||
testchathandler
---
{
  model = "gpt"
}
---
> You are a helpful assistant

count to three

======
1
2
3
======

continue to five

======
4

---||

(document
  (chat_handler)
  (params_block)
  (system_instruction)
  (message_sequence
    (user_message
      (content))
    (turn_delimiter)
    (assistant_message
      (content))
    (turn_delimiter)
    (user_message
      (content))
    (turn_delimiter)
    (assistant_message
      (content))))

==============||
Reasoning in data section
==============||

testchathandler
---
{
  model = "model"
}
---
> You are a helpful assistant

count to three

======
<<<<<< reasoning
I should count to three
here
>>>>>>
1
2
3
======

---||

(document
  (chat_handler)
  (params_block)
  (system_instruction)
  (message_sequence
   (user_message
     (content))
   (turn_delimiter)
   (assistant_message
    (data_section
      (data_section_open)
      (data_section_body)
      (data_section_close))
    (content))
   (turn_delimiter)))
